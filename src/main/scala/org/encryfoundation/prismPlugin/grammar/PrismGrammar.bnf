{
  parserClass="org.encryfoundation.prismPlugin.GeneratedParser"

  implements = "org.encryfoundation.prismPlugin.psi.PrismCompositeElement"
  extends="org.encryfoundation.prismPlugin.psi.PrismCompositeElementImpl"

  psiClassPrefix="Prism"
  psiImplClassSuffix="Impl"
  psiPackage="org.encryfoundation.prismPlugin.psi"
  psiImplPackage="org.encryfoundation.prismPlugin.impl"

  elementTypeHolderClass="org.encryfoundation.prismPlugin.psi.PrismTypes"
  elementTypeClass="org.encryfoundation.prismPlugin.psi.PrismCompositeElementType"
  tokenTypeClass="org.encryfoundation.prismPlugin.psi.PrismTokenType"

  psiImplUtilClass="org.encryfoundation.prismPlugin.psi.PrismPsiUtilImpl"

  tokens = [

        //bool types
        BOOLEAN_TRUE = 'true'
        BOOLEAN_FALSE = 'false'

        //compr
        LT = '<'
        GT = '>'
        EQ = '=='
        GtE = '>='
        LtE = '<='
        NotEq = '<>'

        //bool and, or

        AND = '&&'
        OR = '||'

        //math
        ADD = '+'
        SUB = '-'
        POW = '**'
        MULT = '*'
        DIV = "/"
        MOD = '%'

        //type
        ANY_TYPE = 'Any'
        UNIT_TYPE = 'Unit'
        BOOL_TYPE = 'Bool'
        INT_TYPE = 'Int'
        BYTE_TYPE = 'Byte'
        STRING_TYPE = 'Sting'


        LEFT_CURLY_BRACKET = '{'
        RIGHT_CURLY_BRACKET = '}'

        LEFT_ROUND_BRACKET = '('
        RIGHT_ROUND_BRACKET = ')'

        EQU = '='

        COLON = ':'

        DOUBLE_QUOTES = '"'
        SINGLE_QUOTE = "'"

        LAMB = 'lamb'
        LET = 'let'

        IF = 'if'
        ELSE = 'else'

        CONTRACT_INIT = 'contract'

        NUMBER = 'regexp:[0-9]+'
        STRING = 'regexp:["][a-zA-Z0-9_]*["]'
        BASE_STRING = "regexp:['][a-zA-Z0-9_]*[']"
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'

        WHITE_SPACE = 'regexp:\s+'
    ]

    implements("VariableDefinition")="org.encryfoundation.prismPlugin.psi.PrismNamedElement"
    extends("VariableDefinition")="org.encryfoundation.prismPlugin.psi.PrismNamedElementImpl"
}


SimpleFile ::= Contract

BooleanType ::= BOOLEAN_TRUE | BOOLEAN_FALSE

MathOp ::= ADD | SUB | POW | MULT | DIV | MOD

ComprOp ::= AND | OR | GtE | LtE | NotEq | GT | LT | EQ

BASE58_STR ::= base58init BASE_STRING

BASE16_STR ::= base16init BASE_STRING

private base58init ::= base58

private base16init ::= base16

FunctionDefinition ::= def IDENTIFIER LEFT_ROUND_BRACKET ArgsList? RIGHT_ROUND_BRACKET (COLON Type)? EQU LEFT_CURLY_BRACKET Expr RIGHT_CURLY_BRACKET

STMT ::= BASE58_STR | BASE16_STR | NUMBER | STRING | BooleanType | IDENTIFIER

VariableDefinition ::= LET IDENTIFIER (COLON Type)? EQU (FuncCallExpr | STMT) {

    methods = [getNameIdentifier getReference]
}

Type ::= ANY_TYPE | UNIT_TYPE | BOOL_TYPE | INT_TYPE | BYTE_TYPE | STRING_TYPE // add collections

ArgsList ::= IDENTIFIER (COLON Type)? (',' ArgsList)?

//exprs

//arithm

    RightArithExpr ::= MathOp (NUMBER | IDENTIFIER) (RightArithExpr)?

    AritmExpr ::= (NUMBER | IDENTIFIER) RightArithExpr

//compr

    RightBoolExpr ::= ComprOp (BooleanType | FuncCallExpr| IDENTIFIER | STMT) (RightBoolExpr)?

    BoolExpr ::= (BooleanType | FuncCallExpr | IDENTIFIER | STMT) RightBoolExpr?

//lamb def

    LambExpr ::= LAMB LEFT_ROUND_BRACKET ArgsList RIGHT_ROUND_BRACKET EQU Expr

// if expr

    IfExpr ::= IF LEFT_ROUND_BRACKET BoolExpr RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET Expr? RIGHT_CURLY_BRACKET
               ELSE LEFT_CURLY_BRACKET Expr? RIGHT_CURLY_BRACKET

// if let expr

    IfLetExpr ::= IF LEFT_ROUND_BRACKET VariableDefinition RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET Expr? RIGHT_CURLY_BRACKET
                  ELSE LEFT_CURLY_BRACKET Expr? RIGHT_CURLY_BRACKET

// func call

    FuncCallExpr ::= IDENTIFIER LEFT_ROUND_BRACKET identifiers_list RIGHT_ROUND_BRACKET

    private identifiers_list ::= IDENTIFIER ("," identifiers_list)?

// global expr

    Expr ::= AritmExpr
    | BoolExpr
    | LambExpr
    | FunctionDefinition
    | VariableDefinition
    | IfExpr
    | IfLetExpr

//Contract

    Contract ::= CONTRACT_INIT LEFT_ROUND_BRACKET ArgsList? RIGHT_ROUND_BRACKET EQU LEFT_CURLY_BRACKET Expr* RIGHT_CURLY_BRACKET