{
  parserClass="org.encryfoundation.prismPlugin.GeneratedParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Prism"
  psiImplClassSuffix="Impl"
  psiPackage="org.encryfoundation.prismPlugin.psi"
  psiImplPackage="org.encryfoundation.prismPlugin.impl"

  elementTypeHolderClass="org.encryfoundation.prismPlugin.psi.PrismTypes"
  elementTypeClass="org.encryfoundation.prismPlugin.psi.PrismElementType"
  tokenTypeClass="org.encryfoundation.prismPlugin.psi.PrismTokenType"

  tokens = [

        //bool types
        BOOLEAN_TRUE = 'true'
        BOOLEAN_FALSE = 'false'

        //compr
        LT = '<'
        GT = '>'
        EQ = '=='
        GtE = '>='
        LtE = '<='
        NotEq = '<>'

        //math
        ADD = '+'
        SUB = '-'
        POW = '**'
        MULT = '*'
        DIV = "/"
        MOD = '%'

        //type
        ANY_TYPE = 'Any'
        UNIT_TYPE = 'Unit'
        BOOL_TYPE = 'Bool'
        INT_TYPE = 'Int'
        BYTE_TYPE = 'Byte'
        STRING_TYPE = 'Sting'


        LEFT_CURLY_BRACKET = '{'
        RIGHT_CURLY_BRACKET = '}'

        LEFT_ROUND_BRACKET = '('
        RIGHT_ROUND_BRACKET = ')'

        EQU = '='

        COLON = ':'

        DOUBLE_QUOTES = '"'
        SINGLE_QUOTE = "'"

        LAMB_DEF = 'lamb'
        VAR_DEF = 'let'

        CONTRACT_INIT = 'contract'

        NUMBER = 'regexp:[0-9]+'
        STRING = 'regexp:["][a-zA-Z0-9_]*["]'
        BASE_STRING = "regexp:['][a-zA-Z0-9_]*[']"
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'

        WHITE_SPACE = 'regexp:\s+'
    ]
}


SimpleFile ::= Contract

BooleanType ::= BOOLEAN_TRUE | BOOLEAN_FALSE

MathOp ::= ADD | SUB | POW | MULT | DIV | MOD

ComprOp ::= GT | LT | EQ | GtE | LtE | NotEq

BASE58_STR ::= base58init BASE_STRING

BASE16_STR ::= base16init BASE_STRING

private base58init ::= base58

private base16init ::= base16

FunctionDefinition ::= def IDENTIFIER LEFT_ROUND_BRACKET ArgsList? RIGHT_ROUND_BRACKET (COLON Type)? EQU LEFT_CURLY_BRACKET Expr RIGHT_CURLY_BRACKET

STMT ::= BASE58_STR | BASE16_STR | NUMBER | STRING | BooleanType | IDENTIFIER

VariableDefinition ::= VAR_DEF IDENTIFIER (COLON Type)? EQU STMT

Type ::= ANY_TYPE | UNIT_TYPE | BOOL_TYPE | INT_TYPE | BYTE_TYPE | STRING_TYPE // add collections

ArgsList ::= IDENTIFIER (COLON Type)? (',' ArgsList)?

//exprs

//arithm

    RightArithExpr ::= MathOp (NUMBER | IDENTIFIER) (RightArithExpr)?

    AritmExpr ::= (NUMBER | IDENTIFIER) RightArithExpr

//compr

    RightComprExpr ::= ComprOp (BooleanType | IDENTIFIER) (RightComprExpr)?

    ComprExpr ::= (BooleanType | IDENTIFIER) RightComprExpr?

//lamb def

    LambExpr ::= LAMB_DEF LEFT_ROUND_BRACKET ArgsList RIGHT_ROUND_BRACKET EQU Expr

// global expr

    Expr ::= AritmExpr | ComprExpr | LambExpr | FunctionDefinition | VariableDefinition

//Contract

    Contract ::= CONTRACT_INIT LEFT_ROUND_BRACKET ArgsList? RIGHT_ROUND_BRACKET EQU LEFT_CURLY_BRACKET Expr* RIGHT_CURLY_BRACKET